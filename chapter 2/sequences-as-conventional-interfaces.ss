(define (sum-odd-squares tree)
  (cond ((null? tree) 0)
        ((not (pair? tree))
         (if (odd? tree) (square tree) 0))
        (else (+ (sum-odd-squares (car tree))
                 (sum-odd-squares (cdr tree))))))

(define (even-fibs n)
  (define (next k)
    (if (> k n)
        '()
        (let ((f (fib k)))
          (if (even? f)
              (cons f (next (+ k 1)))
              (next (+ k 1))))))
  (next 0))

(define (fib n)
  (define (fib-iter a b k)
    (cond ((= (- k 2) n) a)
          ((= (- k 1) n) b)
          ((= k n) (+ a b))
          (else (fib-iter b (+ a b) (+ k 1)))))
  (fib-iter 0 1 2))