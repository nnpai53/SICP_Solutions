(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((= x (car set)) #t)
        ((< x (car set)) #f)
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (define (adjoin-iter x left-part right-part)
    (cond ((null? right-part) (append left-part (list x)))
          ((= x (car right-part)) (append left-part right-part))
          ((< x (car right-part)) (append left-part (list x) right-part))
          (else (adjoin-iter (append left-part (car right-part)) x (cdr right-part)))))
  (adjoin-iter x '() set))


              